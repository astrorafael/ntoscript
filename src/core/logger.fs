((
$Date: 2008-05-14 22:03:33 +0200 (mi√© 14 de may de 2008) $
$Revision: 522 $
$Author: astrorafael $
$HeadURL: file:///home/desa/repos/ntoscript/trunk/src/core/logger.fs $

2008 By Rafael Gonzalez Fuentetaja
This file is placed in the public domain. NO WARRANTY.
))

\ #######################
\ *! logger
\ *R @node{Simple logger}
\ *T Simple logger
\ #######################

\ ***************
\ *S Introduction
\ ***************

\ *P This is a simple module to allow formatted logging to standard output.
\ ** Messages are divided in three classes:
\ *( 1
\ *B *\fo{FOREGROUND},
\ *B *\fo{BACKGROUND} and
\ *B *\fo{INDI}
\ *)

\ *P *\fo{FOREGROUND} messages are generated by commands issued by the user
\ ** in the console, that is the *\fo{MAIN} task.
\ ** *\fo{BACKGROUND} messages are intended for other user programemd tasks.
\ ** *\fo{INDI} messages are generated by the *\fo{Listener} tasks.
\ ** *\fo{INDI} logging is turned on by default.


\ *P The user can enable/disable printing these messages classes.
\ ** By default, the printing settings are as in the example shown below.
\ ** Examples:
\ *E    foreground logging off
\ **    background logging off
\ **    indi       logging on

\ *P When printing log messages, the programmer must specify the message class.
\ ** Example:
\ *E    s" My Exception" foreground .$excp


\ ***************
\ +S Design notes
\ ***************

\ +P N/A.

\ ***********
\ *S Glossary
\ ***********

MODULE Logger
\ *G

0 Constant indi
\ *G Background logging identifier, intended for user tasks.

1 Constant background
\ *G Background logging identifier, intended for user tasks.

2 Constant foreground
\ *G Foreground logging identifier, intended for the *\fo{MAIN} task.


3 Array Logging
\ *G Control display of background/foreground logging to console.


Semaphore logsema
\ +G Control concurrent printing of several *\{indi-server} database messages
\ +* to a single console.

: /logger
\ +G Initializes module. *\fo{INDI} logging is turned on by default.
   indi       logging on
   background logging off
   foreground logging off
   logsema InitSem
;

/logger					\ at load time


\ --------------------
\ +N Low level factors
\ --------------------


: .GMTime ( -- )
\ +G Print the current system UTC date as a ISO 8601 string.
\ +* YYYY-MM-DDTHH:MM:SS to the current output device.
   gmtime&date .iso-8601-time
;


: .excp-head  ( -- )
\ +G Print a formatted exception header
\ +* to the current output device.
\ +E   YYYY-MM-DDTHH:MM:SS: Exception:   
   .GMTime [char] : emit space
   ." Task " self .task space
   ." Exception: "
;



: (.logtask)		     \ ca1 u1 --
\ +G Log message and task id.
\ +* Format is:   
\ +E   YYYY-MM-DDTHH:MM:SS: Task <tcb> <my message> <cr>
   logsema request
   .GMTime [char] : emit  space
   ." Task " self .task type cr
   logsema signal
;

   
: (.$excp)		    \ ca1 u1 -- 
\ +G Log exception message
\ +* Format is:   
\ +E   YYYY-MM-DDTHH:MM:SS: Exception: <exception message> <cr>     
   logsema request
   .excp-head type cr
   logsema signal
;


: (.#excp)		 \ n -- 
\ +G Print a numbered exception message given by *\i{n},
\ +* being *\i{n} either ANS throw codes or a OS *\i{errno} error.   
\ +* Format is:   
\ +E   YYYY-MM-DDTHH:MM:SS: Exception: <exception message> <cr>
   logsema request
   .excp-head Err$ .Err cr
   logsema signal
;

: (.log)		     \ ca1 u1 --
\ +G Log timestamped message *\i{ca1 u1}.
\ +* Format is:   
\ +E   YYYY-MM-DDTHH:MM:SS: <my message> <cr>
   logsema request
   .GMTime [char] : emit space type cr
   logsema signal
;


: (.log1)			      \ ca1 u1 --
\ +G Print 1 strings to standard output plus *\fo{CR}.
\ +* *\i{ca1 u1} being a free text message.  
   logsema request
   type cr
   logsema signal
;


: (.log2)			      \ ca1 u1 ca2 u2 --
\ +G Print 2 strings to standard output separated by colon and space.
\ +* *\i{ca2 u2} usually being the timestamp.
\ +* *\i{ca1 u1} usually being a free text message.  
   logsema request
   type [char] : emit space
   type cr
   logsema signal
;

: (.log3)			      \ ca1 u1 ca2 u2 ca3 u3 --
\ +G Print 3 strings to standard output separated by colon and space.
\ +* *\i{ca3 u3} usually being the timestamp.
\ +* *\i{ca2 u2} usually being the INDI device.
\ +* *\i{ca1 u1} usually being a free text message.  
   logsema request
   type [char] : emit space
   type [char] : emit space
   type cr
   logsema signal
;

: (.log4)			      \ ca1 u1 ca2 u2 ca3 u3 ca4 u4 --
\ +G Print 4 strings to standard output separated by colon and space.
\ +* *\i{ca4 u4} usually being the timestamp.
\ +* *\i{ca3 u3} usually being the INDI device.
\ +* *\i{ca2 u2} usually being the INDI property name.
\ +* *\i{ca1 u1} usually being a free text message.    
   logsema request
   type [char] : emit space
   type [char] : emit space
   type [char] : emit space
   type cr
   logsema signal
;

\ --------------------------
\ *N Formatted INDI logging
\ --------------------------

: log		     \ ca1 u1 n1 --
\ *G Print a timestamped string to standard output.
\ ** *\i{ca1 u1} usually being a free text message.    
\ ** *\i{n1} is either *\fo{BACKGROUND} or *\fo{FOREGROUND}.
\ ** Format and display order is:   
\ *E   YYYY-MM-DDTHH:MM:SS: <my message> <cr>
   logging @ if (.log) exit then 2drop
;

: log1		     \ ca1 u1 n1 --
\ *G Print 1 string to standard output.
\ ** *\i{ca1 u1} usually being a free text message.    
\ ** *\i{n1} is either *\fo{BACKGROUND} or *\fo{FOREGROUND}.
\ ** Format and display order is:   
\ *E   <my message> <cr>
   logging @ if (.log1) exit then 2drop
;

: log2		     \ ca1 u1 ca2 u2 n1 --
\ *G Print 2 strings to standard output separated by colon and space.
\ ** *\i{ca2 u2} usually being the timestamp.
\ ** *\i{ca1 u1} usually being a free text message.    
\ ** *\i{n1} is either *\fo{BACKGROUND} or *\fo{FOREGROUND}.
\ ** Format and display order is:   
\ *E   YYYY-MM-DDTHH:MM:SS: <my message> <cr>
   logging @ if (.log2) exit then 4drop
;

: log3		     \ ca1 u1 ca2 u2 ca3 u3 n1 --
\ *G Print 3 strings to standard output separated by colon and space.
\ ** *\i{ca3 u3} usually being the timestamp.
\ ** *\i{ca2 u2} usually being the INDI device.
\ ** *\i{ca1 u1} usually being a free text message.    
\ ** *\i{n1} is either *\fo{BACKGROUND} or *\fo{FOREGROUND}.
\ ** Format and display order is:   
\ *E   YYYY-MM-DDTHH:MM:SS: <device>: <my message> <cr>
   logging @ if (.log3) exit then 4drop 2drop
;


: log4		     \ ca1 u1 ca2 u2 ca3 u3 ca4 u4 n1 --
\ *G Print 4 strings to standard output separated by colon and space.
\ ** *\i{ca4 u4} usually being the timestamp.
\ ** *\i{ca3 u3} usually being the INDI device.
\ ** *\i{ca2 u2} usually being the INDI property name.
\ ** *\i{ca1 u1} usually being a free text message.
\ ** Format and display order is:   
\ *E   YYYY-MM-DDTHH:MM:SS: <device>: <property>: <my message> <cr>
   logging @ if (.log4) exit then 4drop 4drop
;


: logtask		     \ ca1 u1 n1 --
\ *G Log message and task id.
\ ** *\i{n1} is either *\fo{BACKGROUND} or *\fo{FOREGROUND}.   
\ ** Format and display order is:   
\ *E   YYYY-MM-DDTHH:MM:SS: Task <tcb> <my message> <cr>
   logging @ if (.logtask) exit then 2drop
;

   
: .$excp		    \ ca1 u1 n1 -- 
\ *G Log simple exception message given by *\i{ca1 u1}.
\ ** *\i{n1} is either *\fo{BACKGROUND} or *\fo{FOREGROUND}.   
\ ** Format and display order is:   
\ *E   YYYY-MM-DDTHH:MM:SS: Exception: <exception message> <cr>     
   logging @ if (.$excp) exit then 2drop
;


: .#excp		 \ n1 n2 -- 
\ *G Print a numbered exception message given by *\i{n1},
\ ** being *\i{n1} either ANS throw codes or a OS *\i{errno} error.
\ ** *\i{n2} is either *\fo{BACKGROUND} or *\fo{FOREGROUND}.   
\ ** Format and display order is:   
\ *E   YYYY-MM-DDTHH:MM:SS: Exception: <exception message> <cr>
   logging @ if (.#excp) exit then drop
;

export logging
export indi
export background
export foreground

export .#excp
export .$excp
export logtask
export log
export log1
export log2
export log3
export log4

END-MODULE

\ ======
\ *> ###
\ ======
